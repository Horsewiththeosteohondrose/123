Итак, сегодня будет разговор о некоторых утилитах линукс.

Tar.  Утилита линукс, которая позволяет хранить несколько файлов в одном. Для сжатия она использует сторонние утилиты, такие 
как gzip и bzip.  Синтаксис команды выглядит как tar –cvf [имя файла назначения].tar [имя каталога\файла] для архивации, 
и параметр –xvf для разархивации.  Теперь о сжатии. После того как создан файл .tar требуется его сжать.  
Чаще всего для этого используются gzip, использующий алгоритм сжатия без потерь Deflate и bzip, использующий 
преобразование Барроуза-Уилера. Принцип преобразования Барроуза-Уилера заключается в том, что меняет порядок 
символов таким образов, что повторяющиеся строки образуют на выходе идущие подряд последовательности одинаковых символов.
Благодаря этому и происходит сжатие.

Ssh. Устанавливается ssh сервер или клиент для работы с удалённым доступом. Синтаксис ssh username@hostname, где username логин
 пользователя, а hostname - адрес удалённого хоста. Работает с удалённым терминалом. Можно непосредственно
управлять удлённым терминалом либо передавать отдельные команды. Позволяет проводить авторизацию по ключу, который генерирует и
передаёт на удалённый хост, и в дальнейшем позволяет авторизироваться без пароля. Как показала практика очень удобная вещь для 
работы с удалёнными хостами. Раньше для этого я использовал putty, но так работать оказалось гораздо удобнее. Почему? Потому что так проще
работать в одном окне терминала, не переключаясь между ними. Хотя это и мелочи.

Scp. Протокол RCP копирования файлов, использующий в качестве транспорта не RSH, а SSH. Синтаксис копирования на удалённый хост 
scp SourceFile user@host:/directory/TargetFile. Синтаксис копирования с удалённого хоста scp user@host:/directory/SourceFile TargetFile
Тут тоже всё понятно. Копирования с удалённого хоста. Не надо бегать с флешками между компьютерами что бы перекидывать информацию
с одного на другой. Ранее я его не использовал. Хотя ранее мне это просто и не требовалось)

Top. Команда выводящая список работающих процессов и информацию о них.  Сортирует их по нагрузке на процессор. В windows есть
аналог - диспетчер задач. Тут всё просто, думаю лишнего объяснять не надо. Захотел - убил, захотел - пощадил.

Htop. Утилита монитор процессов. Отображает запущенные процессы и позволяет их контролировать. Отображается в виде 
примитивной графики в терминале. Была задумана для замены top.

Atop. Интерактивный монитор производительности для Linux. Аналог top, но в отличие от него выводит только 
новые изменения об активных процессах системы. Даёт возможности для контроля загрузки Оперативной памяти и 
центрального процессора, а так же жёстких дисков и сетей.

Kill. Команда для завершения процессов. Посылает сигнал указанному процессу, по умолчанию посылается сигнал 
SIGTERM, который завершит те процессы, которые не обрабатывают его приход. В других случаях применяется SIGKILL.

Ps. Синтаксис ps [option]
Список опций.
•	-A : все процессы;
•	-a : связанные с конкретным терминалом, кроме главных системных процессов сеанса, часто используемая опция;
•	-N : отрицание выбора;
•	-d : все процессы, кроме главных системных процессов сеанса;
•	-e : все процессы;
•	-f : расширение информации
•	T : все процессы на конкретном терминале;
•	a : процессы, связанные с текущим терминалом, а также процессы других пользователей;
•	r : информация только о работающих процессах;
•	x : процессы, отсоединённые от терминала.

Альтернативой ps является утилита top. Удобно использовать вместе с grep, что бы выводить конкретные процессы. Гораздо чаще я
использую ей вместо top, htop, atop. Правда, просто потому что мне так показали) ps aux |grep [процесс], получаем id процесса
с которым в дальнейшем можно работать.

AWK — интерпретируемый скриптовый C-подобный язык построчного разбора и обработки входного потока (например, текстового файла) 
по заданным шаблонам (регулярным выражениям). Используется в bash (SH) скриптах. AWK рассматривает входной поток как список 
записей. Каждая запись делится на поля. На основе этой информации выполняется некоторый определённый программистом алгоритм 
обработки. По умолчанию разделителем записей является символ новой строки (то есть записи — это то же самое, что строки), 
разделителем полей — символ пробела или табуляции, или последовательность таких символов. Символы-разделители можно явно 
определить в программе. Символ-разделитель полей можно определить и в командной строке.

sed— потоковый текстовый редактор (а также язык программирования), применяющий различные предопределённые текстовые 
преобразования к последовательному потоку текстовых данных. sed получает входной поток (обычно файл) построчно, редактирует 
каждую строку согласно правилам, определённым в sed-скрипте с использованием простого языка sed, и затем выводит результат в выходной поток.

cron — демон-планировщик задач в UNIX-подобных операционных системах, использующийся для периодического выполнения заданий 
в определённое время. Регулярные действия описываются инструкциями, помещенными в файлы crontab и в специальные директории.
Файлы crontab, создаваемые для отдельных пользователей, находятся в каталоге[1] /usr/spool/cron/crontabs/ или 
/var/spool/cron/tabs/. Редактировать их вручную не рекомендуется, для этого используют командуcrontab -e. Файлы crontab, 
используемые для управления всей системой, располагаются в директории /etc/cron.d/. Кроме того, в директориях /etc/cron.daily/,
/etc/cron.weekly/ и /etc/cron.monthly/размещаются автоматически запускаемые программы (ежедневно, еженедельно или ежемесячно).
Каждый пользователь системы имеет свой файл заданий crontab, в котором описано, в какое время и какие программы запускать 
от имени этого пользователя. Для редактирования файла crontab используется специальная одноименная программаcrontab, 
позволяющая не прерывать процесс cron на время редактирования.

Service. Запуск, перезагрузка и остановка серверов. Синтаксис команды:
service SCRIPT COMMAND[OPTONS]. Обновил конфиги? Перезапусти этой командой, а не перезагружай комп!

Команда ifconfig используется для конфигурирования сетевых интерфейсов ядра. Она используется на этапе загрузки операционной 
системы при необходимости настройки интерфейсов. После этого она обычно используется только при отладке или настройке
производительности системы. При использовании ifconfig /all выводит параметры сети. ifconfig eth0 

Сигналы в UNIX, Unix-подобных и других POSIX-совместимых операционных системах являются одним из способов взаимодействия 
между процессами (англ. IPC, inter-process communication). Фактически, сигнал — это асинхронное уведомление процесса о 
каком-либо событии. Когда сигнал послан процессу, операционная система прерывает выполнение процесса. Если процесс установил 
собственный обработчик сигнала, операционная система запускает этот обработчик, передав ему информацию о сигнале. 
Если процесс не установил обработчик, то выполняется обработчик по умолчанию.
Названия сигналов «SIG…» являются числовыми константами (макроопределениями Си) со значениями, определяемыми в заголовочном 
файле signal.h. Числовые значения сигналов могут меняться от системы к системе, хотя основная их часть имеет в разных системах 
одни и те же значения. Утилита kill позволяет задавать сигнал как числом, так и символьным обозначением.

